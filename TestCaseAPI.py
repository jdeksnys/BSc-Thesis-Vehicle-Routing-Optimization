from TestCaseEnum import TEST
import gurobipy as gp


""""
Parameter data based on test case value.
"""


def get_N_coords(testCaseEnum):
    """
    Node id and coordinates.
    """
    if(testCaseEnum == TEST.CASE_1):
        N_coords = {
            1: (0,0),
            2: (0,5),
            3: (5,0)
        }
    elif(testCaseEnum == TEST.CASE_2):
        N_coords = {
            1: (2,0),
            2: (3,1),
            3: (2,1),
            4: (0,3)
        }
    elif(testCaseEnum == TEST.CASE_3 or testCaseEnum == TEST.CASE_11):
        N_coords = {
            1: (2,2),
            2: (1,1),
            3: (2,1),
            4: (3,1),
            5: (2,0),
        }
    elif(testCaseEnum == TEST.CASE_4):
        N_coords = {
            1: (1,1),
            2: (2,1),
            3: (3,1),
            4: (1,2),
            5: (2,2),
            6: (3,2),
            7: (1,3),
            8: (2,3),
            9: (3,3),
        }
    elif(testCaseEnum == TEST.CASE_5):
        N_coords = {
            1: (1,1),
            2: (2,1),
            3: (3,1),
            4: (1,2),
            5: (2,2),
            6: (3,2),
            7: (1,3),
            8: (2,3),
            9: (3,3),
        }
    elif(testCaseEnum == TEST.CASE_6):
        N_coords = {
            1: (1,1),
            2: (2,1),
            3: (3,1),
            4: (1,2),
            5: (2,2),
            6: (3,2),
            7: (1,3),
            8: (2,3),
            9: (3,3),
        }
    elif(testCaseEnum == TEST.CASE_7 or testCaseEnum == TEST.CASE_8 or testCaseEnum == TEST.CASE_9 or testCaseEnum==TEST.CASE_16 or testCaseEnum==TEST.CASE_18):
        N_coords = {
            1: (0,2),
            2: (2,9),
            3: (8,6),
            4: (10,6),
            5: (9,4),
            6: (9,1),
            7: (16,3),
            8: (20,0),
            9: (22,4),
            10: (15,6),
            11: (12,12),
            12: (14,8),
            13: (16,11),
            14: (20,8),
            15: (21,11),
            16: (23,9),
        }
    elif(testCaseEnum == TEST.CASE_10):
        N_coords = {
            1: (0,2),
            2: (2,9),
            3: (8,6),
            4: (10,6),
            5: (9,4),
            1005: (10,4),
            6: (9,1),
            7: (16,3),
            8: (20,0),
            9: (22,4),
            10: (15,6),
            11: (12,12),
            12: (14,8),
            13: (16,11),
            14: (20,8),
            15: (21,11),
            16: (23,9),
        }
    elif(testCaseEnum == TEST.CASE_12):
        N_coords = {
            1: (3,5),
            2: (3,4),
            3: (1,3),
            4: (2,3),
            5: (3,3),
            6: (4,3),
            7: (5,3),
            8: (3,2),
            9: (3,1),
        }
    elif(testCaseEnum == TEST.CASE_13):
        N_coords = {
            1: (75, -39),
2: (74, -39),
3: (73, -39),
4: (72, -39),
5: (71, -39),
6: (70, -39),
7: (69, -39),
8: (68, -39),
9: (67, -39),
10: (66, -39),
11: (65, -39),
12: (64, -38),
13: (63, -37),
14: (62, -36),
15: (61, -35),
16: (60, -34),
17: (59, -33),
18: (58, -32),
19: (57, -31),
20: (56, -30),
21: (55, -29),
22: (54, -28),
23: (52, -26),
24: (50, -25),
25: (48, -24),
26: (46, -23),
27: (44, -22),
28: (42, -21),
29: (40, -20),
30: (38, -19),
31: (36, -18),
32: (34, -17),
33: (32, -16),
34: (30, -15),
35: (28, -14),
36: (26, -13),
37: (24, -12),
38: (22, -11),
39: (20, -10),
40: (18, -9),
41: (16, -8),
42: (14, -7),
43: (12, -6),
44: (10, -5),
45: (8, -4),
46: (6, -3),
47: (4, -2),
48: (2, -1),
49: (0, 0),
50: (-0.25, 0),
51: (72, -28),
52: (71, -28),
53: (70, -28),
54: (69, -28),
55: (68, -28),
56: (67, -28),
57: (66, -28),
58: (65, -28),
59: (64, -28),
60: (63, -28),
61: (61, -28),
62: (60, -28),
63: (59, -28),
64: (58, -28),
65: (57, -28),
66: (56, -28),
67: (55, -28),
68: (73, -28),
69: (67, -37),
70: (49, -41),
71: (50, -40),
72: (52, -38),
73: (53, -37),
74: (55, -35),
75: (58, -32),
76: (60, -30),
77: (61, -29),
78: (62, -28),
79: (67, -38),
80: (59, -39),
81: (60, -39),
82: (62, -39),
83: (63, -39),
84: (61, -39),
85: (62, -39),
86: (72, -17),
87: (68, -21),
88: (67, -22),
89: (65, -24),
90: (64, -25),
91: (63, -26),
92: (62, -27),
93: (61.5, -27),
94: (60, -15),
95: (55, -20),
96: (52, -23),
97: (54, -21),
98: (53, -22),
99: (56, -19),
100: (64, -39),
101: (64, -40),
102: (64, -41),
103: (77, -39),
104: (66, -38),
105: (64, -11),
106: (69, -6),
107: (-61, -7),
108: (-59, -7),
109: (-53, -7),
110: (-52, -7),
111: (-49, -7),
112: (-45, -7),
113: (-44, -7),
114: (-41, -7),
115: (-38, -7),
116: (-36, -7),
117: (-32, -7),
118: (-31, -7),
119: (-29, -7),
120: (0, -7),
121: (2, -7),
122: (4, -7),
123: (3, -7),
124: (12, -7),
125: (14, -7),
126: (16, -7),
127: (18, -7),
128: (20, -7),
129: (22, -7),
130: (24, -7),
131: (-34, -5),
132: (-37, -2),
133: (-20, 0),
134: (-22, 1),
135: (-24, 2),
136: (-26, 3),
137: (-28, 4),
138: (-30, 5),
139: (-32, 6),
140: (-34, 7),
141: (-36, 8),
142: (-38, 9),
143: (-40, 10),
144: (-40, 11),
145: (-41, 12),
146: (-42, 12),
147: (-40, 12),
148: (-32, -12),
149: (-42, 12),
150: (-0.5, 0),
151: (-5, -4),
152: (-2, -2),
153: (-4, -4),
154: (-32, -13),
155: (-30, -6),
156: (-6, -5),
157: (-4, -3),
158: (-3, -2),
159: (-2.5, -2.5),
160: (-2, -1),
161: (-1, 0),
162: (-3, -1),
163: (-4, 0),
164: (-5, 0),
165: (-9, 0),
166: (-15, 0),
167: (-17, 0),
168: (-20, 0),
169: (0, 0.5),
170: (0, 1),
171: (1, 1),
172: (2, 2),
173: (3, 3),
174: (4, 4),
175: (5, 5),
176: (6, 6),
177: (7, 7),
178: (8, 8),
179: (9, 9),
180: (10, 10),
181: (11, 11),
182: (12, 12),
183: (13, 13),
184: (14, 14),
185: (15, 15),
186: (16, 16),
187: (17, 17),
188: (18, 18),
189: (19, 19),
190: (20, 20),
191: (21, 21),
192: (22, 22),
193: (-41, -12),
194: (-45, -16),
195: (-46, -17),
196: (-18, 0),
197: (-19, 0),
198: (-3, 0),
199: (-4, 0),
200: (-5, 0),
201: (-6, 0),
202: (-7, 0),
203: (-8, 0),
204: (-9, 0),
205: (-10, 0),
206: (-11, 0),
207: (-12, 0),
208: (-13, 0),
209: (-14, 0),
210: (-16, 0),
211: (-3, 1),
212: (-3, 2),
213: (3, -1),
214: (9, 15),
215: (10, 16),
216: (11, 17),
217: (12, 18),
218: (0, 2),
219: (0, 3),
220: (0, 4),
221: (0, 5),
222: (0, 6),
223: (1, 7),
224: (2, 8),
225: (3, 9),
226: (4, 10),
227: (5, 11),
228: (6, 12),
229: (7, 13),
230: (8, 14),
231: (7, 7),
232: (6, 6),
233: (4, 4),
234: (19, 19),
235: (11, 11),
        }
    elif(testCaseEnum == TEST.CASE_14 or testCaseEnum==TEST.CASE_15 or testCaseEnum==TEST.CASE_17):
        N_coords = {
            1: (0,2),
            2: (3,9),
            3: (8,6),
            4: (10,6),
            5: (9,4),
            6: (9,0),
            7: (16,3),
            8: (20,0),
            9: (22,4),
            10: (15,6),
            11: (12,12),
            12: (14,8),
            13: (16,11),
            14: (20,8),
            15: (21,11),
            16: (23,9),
            17: (1,4),
            18: (2,6),
            19: (4,8),
            20: (6,7),
            21: (9,6),
            22: (8,5),
            23: (10,5),
            24: (9,2),
            25: (9,1),
            26: (10,8),
            27: (11,10),
            28: (12,7),
            29: (15,8),
            30: (17,8),
            31: (14,9),
            32: (15,10),
            33: (20,9),
            34: (20,10),
            35: (21,8),
            36: (12,6),
            37: (14,6),
            38: (12,5),
            39: (14,4),
            40: (11,3),
            41: (13,3),
            42: (17,3),
            43: (19,4),
            44: (17,2),
            45: (19,1),
            46: (21,1),
            47: (22,3),
            48: (19,7),
            49: (18,5),
            50: (2,2),
            51: (4,2),
            52: (6,3),
        }
    return N_coords


def get_N(N_coords):
    """
    Node ids.
    """
    return list(N_coords.keys())


def get_T(testCaseEnum):
    """
    Transshipment node ids.
    """
    if(testCaseEnum == TEST.CASE_1):
        T = [2]
    elif(testCaseEnum == TEST.CASE_2):
        T = [3]
    elif(testCaseEnum == TEST.CASE_3 or testCaseEnum == TEST.CASE_11):
        T = [3]
    elif(testCaseEnum == TEST.CASE_4):
        T = [1,2,3,4,5,6,7,8,9]
    elif(testCaseEnum == TEST.CASE_5):
        # T = [1,2,3,4,5,6,7,8,9]
        T = [5]
    elif(testCaseEnum == TEST.CASE_6):
        T = [5]
    elif(testCaseEnum == TEST.CASE_7):
        # T = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]
        T=[]
    elif(testCaseEnum == TEST.CASE_8):
        T = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]
    elif(testCaseEnum == TEST.CASE_9):
        T = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]
    elif(testCaseEnum == TEST.CASE_10):
        T = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]
    elif(testCaseEnum == TEST.CASE_12):
        # T = [1,2,3,4,5,6,7,8,9]
        T=[]
    elif(testCaseEnum == TEST.CASE_13):
        T = [n for n in range(1,len(get_N_coords(TEST.CASE_13))+1)]
    elif(testCaseEnum == TEST.CASE_14):
        # T = [n for n in range(1,len(get_N_coords(TEST.CASE_14))+1)]
        T=[]
    elif(testCaseEnum == TEST.CASE_15):
        T = [n for n in range(1,len(get_N_coords(TEST.CASE_15))+1)]
    elif(testCaseEnum == TEST.CASE_16):
        T = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]
    elif(testCaseEnum == TEST.CASE_17):
        T = [n for n in range(1,len(get_N_coords(TEST.CASE_17))+1)]
    elif(testCaseEnum == TEST.CASE_18):
        T = [3]
        # T = [n for n in range(1,len(get_N_coords(TEST.CASE_18))+1)]
    return T


def get_A_D(testCaseEnum, uniqueArcs=False):
    """
    Arcs and distance of arc.
    """
    if(testCaseEnum == TEST.CASE_1):
        if(uniqueArcs == True):
            A, D = gp.multidict({
                (1,2): 1,
                (2,3): 1,
                (2,1): 1,
            })
        else:
            A, D = gp.multidict({
                (1,2): 1,
                (2,3): 1,
                (2,1): 1,
                (3,2): 1,
                (1,3): 1,
                (3,1): 1,
            })
    elif(testCaseEnum == TEST.CASE_2):
        if(uniqueArcs == True):
            A, D = gp.multidict({
                (1,3): 1,
                (2,3): 1,
                (3,4): 1,
            })
        else:
            A, D = gp.multidict({
                (1,3): 1,
                (2,3): 1,
                (3,4): 1,
                (3,1): 1,
                (3,2): 1,
                (4,3): 1,
            })
    elif(testCaseEnum == TEST.CASE_3 or testCaseEnum == TEST.CASE_11):
        if(uniqueArcs == True):
            A, D = gp.multidict({
                (1,3): 1,
                (2,3): 1,
                (3,4): 1,
                (3,5): 1,
            })
        else:
            A, D = gp.multidict({
                (1,3): 1,
                (3,1): 1,
                (2,3): 1,
                (3,2): 1,
                (3,4): 1,
                (4,3): 1,
                (3,5): 1,
                (5,3): 1,
            })
    elif(testCaseEnum == TEST.CASE_4):
        if(uniqueArcs == True):
            A, D = gp.multidict({
                (1,2): 1,
                (2,3): 1,
                (4,5): 1,
                (5,6): 1,
                (7,8): 1,
                (8,9): 1,
                (1,4): 1,
                (4,7): 1,
                (2,5): 1,
                (5,8): 1,
                (3,6): 1,
                (6,9): 1,
            })
        else:
            A, D = gp.multidict({
                (1,2): 1,
                (2,3): 1,
                (4,5): 1,
                (5,6): 1,
                (7,8): 1,
                (8,9): 1,
                (1,4): 1,
                (4,7): 1,
                (2,5): 1,
                (5,8): 1,
                (3,6): 1,
                (6,9): 1,

                (2,1): 1,
                (3,2): 1,
                (5,4): 1,
                (6,5): 1,
                (8,7): 1,
                (9,8): 1,
                (4,1): 1,
                (7,4): 1,
                (5,2): 1,
                (8,5): 1,
                (6,3): 1,
                (9,6): 1,
            })
    elif(testCaseEnum == TEST.CASE_5):
        if(uniqueArcs == True):
                A, D = gp.multidict({
                (1,2): 1,
                (2,3): 1,
                (4,5): 1,
                (5,6): 1,
                (7,8): 1,
                (8,9): 1,
                (1,4): 1,
                (4,7): 1,
                (2,5): 1,
                (5,8): 1,
                (3,6): 1,
                (6,9): 1,
            })
        else:
            A, D = gp.multidict({
                (1,2): 1,
                (2,3): 1,
                (4,5): 1,
                (5,6): 1,
                (7,8): 1,
                (8,9): 1,
                (1,4): 1,
                (4,7): 1,
                (2,5): 1,
                (5,8): 1,
                (3,6): 1,
                (6,9): 1,

                (2,1): 1,
                (3,2): 1,
                (5,4): 1,
                (6,5): 1,
                (8,7): 1,
                (9,8): 1,
                (4,1): 1,
                (7,4): 1,
                (5,2): 1,
                (8,5): 1,
                (6,3): 1,
                (9,6): 1,
            })
    elif(testCaseEnum == TEST.CASE_6):
        if(uniqueArcs == True):
                A, D = gp.multidict({
                (1,2): 1,
                (2,3): 1,
                (4,5): 1,
                (5,6): 1,
                (7,8): 1,
                (8,9): 1,
                (1,4): 1,
                (4,7): 1,
                (2,5): 1,
                (5,8): 1,
                (3,6): 1,
                (6,9): 1,
                #diagonals:
                (1,5): 1,
                (5,9): 1,
                (4,8): 1,
                (2,6): 1,
                (7,5): 1,
                (5,3): 1,
                (8,6): 1,
                (4,2): 1,
            })
        else:
            A, D = gp.multidict({
                (1,2): 1,
                (2,3): 1,
                (4,5): 1,
                (5,6): 1,
                (7,8): 1,
                (8,9): 1,
                (1,4): 1,
                (4,7): 1,
                (2,5): 1,
                (5,8): 1,
                (3,6): 1,
                (6,9): 1,

                (2,1): 1,
                (3,2): 1,
                (5,4): 1,
                (6,5): 1,
                (8,7): 1,
                (9,8): 1,
                (4,1): 1,
                (7,4): 1,
                (5,2): 1,
                (8,5): 1,
                (6,3): 1,
                (9,6): 1,
                #diagonals
                (1,5): 1,
                (5,9): 1,
                (4,8): 1,
                (2,6): 1,
                (7,5): 1,
                (5,3): 1,
                (8,6): 1,
                (4,2): 1,
                
                (5,1): 1,
                (9,5): 1,
                (8,4): 1,
                (6,2): 1,
                (5,7): 1,
                (3,5): 1,
                (6,8): 1,
                (2,4): 1,
            })
    elif(testCaseEnum == TEST.CASE_7 or testCaseEnum == TEST.CASE_8 or testCaseEnum == TEST.CASE_9 or testCaseEnum == TEST.CASE_16):
        if(uniqueArcs == True):
                A, D = gp.multidict({
                (1,2): 3,
                (2,3): 3,
                (1,5):4,
                (3,5):1,
                (3,4):1,
                (4,5):1,
                (4,11):3,
                (5,6):1,
                (5,7):3,
                (4,7):3,
                (4,10):2,
                (4,12):2,
                (12,13):1,
                (12,14):2,
                (14,15):1,
                (14,16):1,
                (7,14):3,
                (7,9):2,
                (7,8):2,
                (8,9):2,
                })
        else:
            A, D = gp.multidict({
                (1,2): 3,
                (2,3): 3,
                (1,5):4,
                (3,5):1,
                (3,4):1,
                (4,5):1,
                (4,11):3,
                (5,6):1,
                (5,7):3,
                (4,7):3,
                (4,10):2,
                (4,12):2,
                (12,13):1,
                (12,14):2,
                (14,15):1,
                (14,16):1,
                (7,14):3,
                (7,9):2,
                (7,8):2,
                (8,9):2,

                (2,1): 3,
                (3,2): 3,
                (5,1):4,
                (5,3):1,
                (4,3):1,
                (5,4):1,
                (11,4):3,
                (6,5):1,
                (7,5):3,
                (7,4):3,
                (10,4):2,
                (12,4):2,
                (13,12):1,
                (14,12):2,
                (15,14):1,
                (16,14):1,
                (14,7):3,
                (9,7):2,
                (8,7):2,
                (9,8):2,
            })
    elif(testCaseEnum == TEST.CASE_10):
        if(uniqueArcs == False):
            A, D = gp.multidict({
                (1,2): 3,
                (2,3): 3,
                (1,5):4,
                (3,5):1,
                (3,4):1,
                (4,5):1,
                (4,11):3,
                (5,6):1,
                (5,7):3,
                (1005,6):1,
                (1005,7):3,
                (4,7):3,
                (4,10):2,
                (4,12):2,
                (12,13):1,
                (12,14):2,
                (14,15):1,
                (14,16):1,
                (7,14):3,
                (7,9):2,
                (7,8):2,
                (8,9):2,

                (2,1): 3,
                (3,2): 3,
                (5,1):4,
                (5,3):1,
                (1005,1):4,
                (1005,3):1,
                (4,3):1,
                (5,4):1,
                (1005,4):1,
                (11,4):3,
                (6,5):1,
                (7,5):3,
                (7,4):3,
                (10,4):2,
                (12,4):2,
                (13,12):1,
                (14,12):2,
                (15,14):1,
                (16,14):1,
                (14,7):3,
                (9,7):2,
                (8,7):2,
                (9,8):2,
            })
    elif(testCaseEnum == TEST.CASE_12):
        if(uniqueArcs == False):
            A, D = gp.multidict({
                (1,2): 1,
                (2,5): 1,
                (5,8): 1,
                (8,9): 1,
                (3,4): 1,
                (4,5): 1,
                (5,6): 1,
                (6,7): 1,

                (2,1): 1,
                (5,2): 1,
                (8,5): 1,
                (9,8): 1,
                (4,3): 1,
                (5,4): 1,
                (6,5): 1,
                (7,6): 1,
            })
    elif(testCaseEnum == TEST.CASE_13):
        if(uniqueArcs == False):
            A, D = gp.multidict({
                (78,59): 1,
(96,95): 1,
(18,17): 1,
(214,230): 1,
(229,228): 1,
(197,168): 1,
(78,77): 1,
(188,187): 1,
(8,9): 1,
(170,169): 1,
(40,41): 1,
(218,218): 1,
(19,18): 1,
(129,128): 1,
(100,101): 1,
(132,133): 1,
(111,110): 1,
(33,29): 1,
(41,42): 1,
(25,25): 1,
(203,202): 1,
(73,74): 1,
(52,51): 1,
(133,134): 1,
(144,143): 1,
(14,15): 1,
(225,226): 1,
(74,75): 1,
(85,84): 1,
(166,167): 1,
(15,16): 1,
(177,176): 1,
(229,214): 1,
(47,48): 1,
(226,227): 1,
(26,25): 1,
(136,135): 1,
(59,59): 1,
(99,95): 1,
(107,108): 1,
(118,117): 1,
(29,27): 1,
(77,76): 1,
(199,200): 1,
(116,193): 1,
(48,49): 1,
(80,81): 1,
(11,9): 1,
(140,141): 1,
(148,154): 1,
(184,184): 1,
(41,37): 1,
(110,109): 1,
(33,33): 1,
(81,82): 1,
(196,167): 1,
(125,125): 1,
(173,174): 1,
(22,23): 1,
(67,22): 1,
(51,68): 1,
(66,66): 1,
(114,115): 1,
(155,153): 1,
(158,158): 1,
(206,207): 1,
(7,7): 1,
(55,56): 1,
(214,229): 1,
(24,96): 1,
(99,99): 1,
(1,103): 1,
(159,159): 1,
(207,208): 1,
(117,153): 1,
(40,40): 1,
(69,85): 1,
(169,172): 1,
(132,132): 1,
(224,224): 1,
(25,24): 1,
(33,37): 1,
(73,73): 1,
(181,182): 1,
(165,165): 1,
(14,14): 1,
(225,225): 1,
(95,97): 1,
(151,10): 1,
(166,166): 1,
(214,215): 1,
(198,198): 1,
(47,47): 1,
(96,98): 1,
(99,94): 1,
(139,139): 1,
(22,130): 1,
(148,117): 1,
(117,148): 1,
(220,222): 1,
(21,22): 1,
(199,199): 1,
(113,114): 1,
(189,234): 1,
(10,12): 1,
(172,172): 1,
(8,79): 1,
(205,206): 1,
(159,10): 1,
(184,183): 1,
(54,55): 1,
(232,232): 1,
(125,124): 1,
(173,173): 1,
(84,83): 1,
(217,216): 1,
(87,88): 1,
(48,169): 1,
(176,175): 1,
(169,50): 1,
(114,114): 1,
(155,152): 1,
(179,180): 1,
(158,157): 1,
(28,29): 1,
(206,206): 1,
(117,116): 1,
(210,167): 1,
(88,89): 1,
(10,151): 1,
(120,121): 1,
(209,208): 1,
(10,160): 1,
(58,57): 1,
(180,181): 1,
(29,30): 1,
(191,190): 1,
(61,62): 1,
(168,197): 1,
(121,122): 1,
(233,174): 1,
(132,131): 1,
(2,3): 1,
(91,90): 1,
(62,63): 1,
(224,223): 1,
(162,150): 1,
(94,95): 1,
(73,72): 1,
(183,182): 1,
(32,31): 1,
(3,4): 1,
(165,164): 1,
(51,53): 1,
(35,36): 1,
(124,123): 1,
(95,96): 1,
(127,128): 1,
(106,105): 1,
(216,215): 1,
(65,64): 1,
(9,11): 1,
(150,50): 1,
(79,8): 1,
(187,188): 1,
(36,37): 1,
(47,46): 1,
(6,5): 1,
(128,129): 1,
(177,232): 1,
(160,161): 1,
(139,138): 1,
(232,177): 1,
(50,48): 1,
(98,97): 1,
(220,221): 1,
(21,21): 1,
(69,70): 1,
(101,102): 1,
(190,189): 1,
(113,113): 1,
(39,38): 1,
(150,162): 1,
(10,11): 1,
(205,205): 1,
(211,10): 1,
(54,54): 1,
(130,22): 1,
(94,99): 1,
(223,222): 1,
(24,22): 1,
(72,71): 1,
(194,195): 1,
(50,169): 1,
(43,44): 1,
(164,163): 1,
(135,136): 1,
(46,46): 1,
(179,179): 1,
(227,228): 1,
(28,28): 1,
(218,170): 1,
(76,77): 1,
(157,151): 1,
(210,166): 1,
(197,196): 1,
(167,210): 1,
(61,61): 1,
(20,20): 1,
(153,153): 1,
(233,173): 1,
(2,2): 1,
(96,24): 1,
(24,26): 1,
(35,35): 1,
(46,41): 1,
(127,127): 1,
(9,10): 1,
(97,95): 1,
(160,160): 1,
(167,196): 1,
(98,96): 1,
(42,43): 1,
(220,220): 1,
(134,135): 1,
(75,76): 1,
(13,12): 1,
(50,150): 1,
(16,17): 1,
(194,194): 1,
(108,109): 1,
(46,45): 1,
(69,10): 1,
(179,178): 1,
(49,50): 1,
(227,227): 1,
(138,137): 1,
(186,186): 1,
(109,110): 1,
(230,229): 1,
(82,83): 1,
(171,170): 1,
(219,219): 1,
(20,19): 1,
(142,143): 1,
(153,152): 1,
(23,24): 1,
(112,111): 1,
(83,84): 1,
(152,156): 1,
(115,116): 1,
(204,203): 1,
(235,181): 1,
(53,52): 1,
(175,176): 1,
(24,25): 1,
(56,57): 1,
(145,144): 1,
(116,117): 1,
(173,233): 1,
(127,126): 1,
(208,209): 1,
(9,9): 1,
(57,58): 1,
(167,168): 1,
(89,90): 1,
(178,177): 1,
(27,26): 1,
(30,31): 1,
(119,118): 1,
(10,211): 1,
(42,42): 1,
(90,91): 1,
(200,201): 1,
(12,10): 1,
(41,46): 1,
(60,59): 1,
(134,134): 1,
(182,183): 1,
(31,32): 1,
(141,142): 1,
(152,151): 1,
(123,124): 1,
(34,34): 1,
(93,92): 1,
(105,94): 1,
(215,216): 1,
(16,16): 1,
(64,65): 1,
(174,175): 1,
(185,184): 1,
(226,222): 1,
(108,108): 1,
(67,67): 1,
(5,6): 1,
(126,125): 1,
(49,49): 1,
(97,98): 1,
(186,185): 1,
(189,190): 1,
(234,189): 1,
(41,41): 1,
(219,218): 1,
(222,223): 1,
(133,133): 1,
(160,10): 1,
(152,155): 1,
(115,115): 1,
(74,74): 1,
(235,180): 1,
(53,51): 1,
(122,123): 1,
(56,56): 1,
(15,15): 1,
(156,152): 1,
(226,226): 1,
(26,24): 1,
(59,58): 1,
(167,167): 1,
(89,89): 1,
(230,214): 1,
(48,48): 1,
(92,91): 1,
(63,64): 1,
(200,200): 1,
(231,178): 1,
(33,32): 1,
(81,81): 1,
(4,5): 1,
(141,141): 1,
(22,22): 1,
(34,33): 1,
(85,69): 1,
(66,65): 1,
(37,38): 1,
(174,174): 1,
(165,205): 1,
(7,6): 1,
(55,55): 1,
(67,66): 1,
(70,71): 1,
(159,158): 1,
(207,207): 1,
(8,7): 1,
(40,39): 1,
(234,188): 1,
(192,191): 1,
(41,40): 1,
(163,164): 1,
(204,165): 1,
(180,235): 1,
(44,45): 1,
(133,132): 1,
(93,59): 1,
(181,181): 1,
(14,13): 1,
(225,224): 1,
(74,73): 1,
(196,197): 1,
(37,33): 1,
(166,165): 1,
(214,214): 1,
(15,14): 1,
(137,138): 1,
(226,225): 1,
(18,19): 1,
(229,230): 1,
(188,189): 1,
(167,166): 1,
(199,198): 1,
(48,47): 1,
(100,85): 1,
(170,171): 1,
(129,130): 1,
(103,1): 1,
(140,139): 1,
(63,63): 1,
(111,112): 1,
(221,222): 1,
(200,199): 1,
(151,157): 1,
(232,231): 1,
(81,80): 1,
(203,204): 1,
(162,163): 1,
(141,140): 1,
(173,172): 1,
(22,21): 1,
(144,145): 1,
(114,113): 1,
(143,149): 1,
(174,173): 1,
(165,204): 1,
(206,205): 1,
(55,54): 1,
(177,178): 1,
(88,88): 1,
(10,150): 1,
(136,137): 1,
(10,159): 1,
(180,180): 1,
(118,119): 1,
(228,229): 1,
(29,29): 1,
(207,206): 1,
(77,78): 1,
(121,121): 1,
(169,170): 1,
(151,152): 1,
(62,62): 1,
(110,111): 1,
(44,44): 1,
(202,203): 1,
(3,3): 1,
(181,180): 1,
(51,52): 1,
(95,95): 1,
(143,144): 1,
(122,121): 1,
(155,155): 1,
(187,187): 1,
(36,36): 1,
(96,96): 1,
(18,18): 1,
(128,128): 1,
(188,188): 1,
(21,20): 1,
(211,162): 1,
(29,33): 1,
(69,69): 1,
(48,46): 1,
(129,129): 1,
(113,112): 1,
(161,161): 1,
(150,161): 1,
(221,221): 1,
(54,53): 1,
(25,26): 1,
(162,162): 1,
(146,145): 1,
(43,43): 1,
(212,10): 1,
(217,214): 1,
(87,86): 1,
(95,99): 1,
(135,135): 1,
(169,48): 1,
(17,18): 1,
(28,27): 1,
(88,87): 1,
(136,136): 1,
(120,119): 1,
(168,168): 1,
(147,145): 1,
(180,179): 1,
(228,228): 1,
(29,28): 1,
(61,60): 1,
(121,120): 1,
(169,169): 1,
(2,1): 1,
(62,61): 1,
(110,110): 1,
(202,202): 1,
(3,2): 1,
(11,104): 1,
(51,51): 1,
(35,34): 1,
(12,69): 1,
(84,85): 1,
(95,94): 1,
(143,143): 1,
(176,177): 1,
(187,186): 1,
(235,235): 1,
(36,35): 1,
(117,118): 1,
(164,202): 1,
(128,127): 1,
(58,59): 1,
(220,219): 1,
(191,192): 1,
(101,100): 1,
(170,218): 1,
(178,231): 1,
(161,160): 1,
(10,9): 1,
(172,169): 1,
(221,220): 1,
(91,92): 1,
(102,101): 1,
(224,225): 1,
(154,148): 1,
(183,184): 1,
(32,33): 1,
(194,193): 1,
(43,42): 1,
(165,166): 1,
(124,125): 1,
(135,134): 1,
(216,217): 1,
(17,17): 1,
(195,194): 1,
(65,66): 1,
(227,226): 1,
(76,75): 1,
(198,199): 1,
(157,158): 1,
(6,7): 1,
(117,131): 1,
(168,167): 1,
(201,201): 1,
(139,140): 1,
(228,227): 1,
(142,142): 1,
(190,191): 1,
(39,40): 1,
(172,173): 1,
(131,132): 1,
(193,116): 1,
(163,201): 1,
(175,175): 1,
(223,224): 1,
(24,24): 1,
(72,73): 1,
(164,165): 1,
(143,142): 1,
(176,176): 1,
(46,48): 1,
(208,208): 1,
(9,8): 1,
(57,57): 1,
(117,117): 1,
(174,233): 1,
(209,209): 1,
(42,41): 1,
(161,150): 1,
(134,133): 1,
(150,150): 1,
(182,182): 1,
(31,31): 1,
(153,155): 1,
(75,74): 1,
(123,123): 1,
(183,183): 1,
(231,232): 1,
(94,105): 1,
(32,32): 1,
(16,15): 1,
(215,215): 1,
(64,64): 1,
(145,147): 1,
(198,162): 1,
(22,67): 1,
(108,107): 1,
(156,156): 1,
(5,5): 1,
(38,39): 1,
(216,216): 1,
(17,16): 1,
(65,65): 1,
(49,48): 1,
(97,97): 1,
(109,108): 1,
(157,157): 1,
(27,29): 1,
(189,189): 1,
(6,6): 1,
(104,11): 1,
(201,200): 1,
(71,72): 1,
(50,49): 1,
(98,98): 1,
(82,81): 1,
(142,141): 1,
(12,13): 1,
(190,190): 1,
(222,222): 1,
(39,39): 1,
(23,22): 1,
(202,164): 1,
(83,82): 1,
(131,131): 1,
(115,114): 1,
(13,14): 1,
(175,174): 1,
(45,46): 1,
(133,168): 1,
(24,23): 1,
(150,10): 1,
(213,48): 1,
(56,55): 1,
(223,223): 1,
(105,106): 1,
(85,100): 1,
(116,115): 1,
(156,151): 1,
(164,164): 1,
(181,235): 1,
(46,47): 1,
(69,12): 1,
(208,207): 1,
(57,56): 1,
(89,88): 1,
(166,210): 1,
(138,139): 1,
(59,93): 1,
(19,20): 1,
(197,197): 1,
(30,29): 1,
(188,234): 1,
(90,89): 1,
(205,165): 1,
(20,21): 1,
(4,4): 1,
(182,181): 1,
(52,53): 1,
(31,30): 1,
(222,226): 1,
(131,117): 1,
(112,113): 1,
(123,122): 1,
(53,54): 1,
(37,37): 1,
(215,214): 1,
(64,63): 1,
(145,146): 1,
(26,27): 1,
(5,4): 1,
(48,213): 1,
(38,38): 1,
(68,51): 1,
(86,87): 1,
(201,163): 1,
(70,79): 1,
(149,143): 1,
(178,179): 1,
(27,28): 1,
(11,11): 1,
(189,188): 1,
(119,120): 1,
(163,163): 1,
(12,12): 1,
(60,61): 1,
(222,221): 1,
(185,185): 1,
(152,153): 1,
(1,2): 1,
(10,69): 1,
(196,196): 1,
(45,45): 1,
(37,41): 1,
(137,137): 1,
(185,186): 1,
(229,229): 1,
(168,133): 1,
(126,127): 1,
(166,209): 1,
(138,138): 1,
(186,187): 1,
(170,170): 1,
(218,219): 1,
(19,19): 1,
(79,70): 1,
(230,230): 1,
(153,117): 1,
(63,62): 1,
(111,111): 1,
(151,156): 1,
(219,220): 1,
(203,203): 1,
(4,3): 1,
(52,52): 1,
(112,112): 1,
(204,204): 1,
(162,198): 1,
(53,53): 1,
(37,36): 1,
(214,217): 1,
(193,194): 1,
(177,177): 1,
(26,26): 1,
(59,60): 1,
(209,166): 1,
(38,37): 1,
(70,69): 1,
(118,118): 1,
(59,78): 1,
(130,129): 1,
(178,178): 1,
(48,50): 1,
(210,210): 1,
(27,27): 1,
(11,10): 1,
(92,93): 1,
(71,70): 1,
(119,119): 1,
(151,151): 1,
(10,212): 1,
(184,185): 1,
(163,162): 1,
(33,34): 1,
(44,43): 1,
(222,220): 1,
(125,126): 1,
(152,152): 1,
(22,24): 1,
(1,1): 1,
(34,35): 1,
(66,67): 1,
(45,44): 1,
(162,211): 1,
(158,159): 1,
(137,136): 1,
(7,8): 1,
            })
    elif(testCaseEnum == TEST.CASE_14 or testCaseEnum==TEST.CASE_15 or testCaseEnum==TEST.CASE_17):
        if(uniqueArcs == False):
            A, D = gp.multidict({
                (1,17): 1,
                (17,18):1,
                (18,2):1,
                (2,19):1,
                (19,20):1,
                (20,3):1,
                (3,21):1,
                (21,4):1,
                (3,22):1,
                (22,5):1,
                (4,23):1,
                (23,5):1,
                (4,26):1,
                (26,27):1,
                (27,11):1,
                (4,28):1,
                (28,12):1,
                (12,31):1,
                (31,32):1,
                (32,13):1,
                (12,29):1,
                (29,30):1,
                (30,14):1,
                (14,33):1,
                (33,34):1,
                (34,15):1,
                (14,35):1,
                (35,16):1,
                (14,48):1,
                (48,49):1,
                (49,7):1,
                (7,42):1,
                (42,43):1,
                (43,9):1,
                (9,47):1,
                (47,46):1,
                (46,8):1,
                (8,45):1,
                (45,44):1,
                (44,7):1,
                (7,41):1,
                (41,40):1,
                (40,5):1,
                (5,24):1,
                (24,25):1,
                (25,6):1,
                (7,39):1,
                (39,38):1,
                (38,4):1,
                (4,36):1,
                (36,37):1,
                (37,10):1,
                (1,50):1,
                (50,51):1,
                (51,52):1,
                (52,5):1,

                (17,1):1,
(18,17):1,
(2,18):1,
(19,2):1,
(20,19):1,
(3,20):1,
(21,3):1,
(4,21):1,
(22,3):1,
(5,22):1,
(23,4):1,
(5,23):1,
(26,4):1,
(27,26):1,
(11,27):1,
(28,4):1,
(12,28):1,
(31,12):1,
(32,31):1,
(13,32):1,
(29,12):1,
(30,29):1,
(14,30):1,
(33,14):1,
(34,33):1,
(15,34):1,
(35,14):1,
(16,35):1,
(48,14):1,
(49,48):1,
(7,49):1,
(42,7):1,
(43,42):1,
(9,43):1,
(47,9):1,
(46,47):1,
(8,46):1,
(45,8):1,
(44,45):1,
(7,44):1,
(41,7):1,
(40,41):1,
(5,40):1,
(24,5):1,
(25,24):1,
(6,25):1,
(39,7):1,
(38,39):1,
(4,38):1,
(36,4):1,
(37,36):1,
(10,37):1,
(50,1):1,
                (51,50):1,
                (52,51):1,
                (5,52):1,
            })
    elif(testCaseEnum == TEST.CASE_18):
        if(uniqueArcs == True):
                A, D = gp.multidict({
                (1,2): 3,
                (2,3): 3,
                (1,5):4,
                (3,5):5,
                (3,4):1,
                (4,5):1,
                (4,11):3,
                (5,6):2,
                (5,7):3,
                (4,7):3,
                (4,10):1,
                (4,12):1,
                (12,13):1,
                (12,14):2,
                (14,15):1,
                (14,16):1,
                (7,14):3,
                (7,9):2,
                (7,8):2,
                (8,9):2,
                })
        else:
            A, D = gp.multidict({
                (1,2): 3,
                (2,3): 3,
                (1,5):4,
                (3,5):3,
                (3,4):1,
                (4,5):1,
                (4,11):3,
                (5,6):2,
                (5,7):3,
                (4,7):3,
                (4,10):1,
                (4,12):1,
                (12,13):1,
                (12,14):2,
                (14,15):1,
                (14,16):1,
                (7,14):3,
                (7,9):2,
                (7,8):2,
                (8,9):2,

                (2,1): 3,
                (3,2): 3,
                (5,1):4,
                (5,3):3,
                (4,3):1,
                (5,4):1,
                (11,4):3,
                (6,5):2,
                (7,5):3,
                (7,4):3,
                (10,4):1,
                (12,4):1,
                (13,12):1,
                (14,12):2,
                (15,14):1,
                (16,14):1,
                (14,7):3,
                (9,7):2,
                (8,7):2,
                (9,8):2,
            })
    return A,D


def get_R_R_orig_R_dest_R_quant_R_w_cost(testCaseEnum, uniqueArcs=False):
    """
    Request id, pickup node, delivery node, number of wagons, cost per wagon per 1km of travel distance.
    """
    if(testCaseEnum == TEST.CASE_1):
        R, R_orig, R_dest, R_quant, R_w_cost = gp.multidict({
            0: (1,3,1,1),
            1: (1,2,1,1),
            2: (2,3,1,1)
        })
    elif(testCaseEnum == TEST.CASE_2):
        R, R_orig, R_dest, R_quant, R_w_cost = gp.multidict({
            0: (1,4,1,1),
            1: (2,4,1,1),
        })
    elif(testCaseEnum == TEST.CASE_3):
        R, R_orig, R_dest, R_quant, R_w_cost = gp.multidict({
            0: (2,4,1,1)
        })
    elif(testCaseEnum == TEST.CASE_4):
        R, R_orig, R_dest, R_quant, R_w_cost = gp.multidict({
            0: (1,5,1,1),
            1: (1,9,1,1),
        })
    elif(testCaseEnum == TEST.CASE_5):
        R, R_orig, R_dest, R_quant, R_w_cost = gp.multidict({
            0: (2,5,1,1),
            1: (2,9,1,1),
        })
    elif(testCaseEnum == TEST.CASE_6):
        R, R_orig, R_dest, R_quant, R_w_cost = gp.multidict({
            0: (2,5,1,1),
            1: (2,9,1,1),
        })
    elif(testCaseEnum == TEST.CASE_7):
        R, R_orig, R_dest, R_quant, R_w_cost = gp.multidict({
            0: (4,1,1,1),
            1: (4,9,1,1),
            2: (4,16,1,1)
        })
    elif(testCaseEnum == TEST.CASE_8):
        R, R_orig, R_dest, R_quant, R_w_cost = gp.multidict({
            0: (15,1,1,1),
            # None: (None, None, None)
        })
    elif(testCaseEnum == TEST.CASE_9):
        R, R_orig, R_dest, R_quant, R_w_cost = gp.multidict({
            0: (4,1,1,1),
            1: (4,5,1,1),
        })
    elif(testCaseEnum == TEST.CASE_10):
        R, R_orig, R_dest, R_quant, R_w_cost = gp.multidict({
            0: (4,1,1,1)
        })
    elif(testCaseEnum == TEST.CASE_11):
        R, R_orig, R_dest, R_quant, R_w_cost = gp.multidict({
            0: (2,4,1,1),
            1: (1,4,1,1),
            2: (2,5,1,1)
        })
    elif(testCaseEnum == TEST.CASE_12):
        R, R_orig, R_dest, R_quant, R_w_cost = gp.multidict({
            0: (3,7,1,1),
            1: (3,9,1,1),
        })
    elif(testCaseEnum == TEST.CASE_13):
        R, R_orig, R_dest, R_quant, R_w_cost = gp.multidict({
            0: (117,96,1,1),
        })
    elif(testCaseEnum == TEST.CASE_14):
        R, R_orig, R_dest, R_quant, R_w_cost = gp.multidict({
            0: (13,1,1,1),
            1: (3,1,1,1),
            2: (5,1,1,1),
            3: (11,1,1,1),
        })
    elif(testCaseEnum == TEST.CASE_15):
        R, R_orig, R_dest, R_quant, R_w_cost = gp.multidict({
            0: (9,12,1,1),
            1: (43,2,1,1),
            2: (1,31,1,1),
            # 3: (50,19,1,1)
        })
    elif(testCaseEnum == TEST.CASE_16):
        R, R_orig, R_dest, R_quant, R_w_cost = gp.multidict({
            0: (1,12,1,1),
            1: (9,11,1,1),
            2: (7,14,1,1),
            3: (5,11,1,1),
            4: (2,12,1,1)
        })
    elif(testCaseEnum == TEST.CASE_17):
        R, R_orig, R_dest, R_quant, R_w_cost = gp.multidict({
            0: (1,14,25,1),
        })
    elif(testCaseEnum == TEST.CASE_18):
        R, R_orig, R_dest, R_quant, R_w_cost = gp.multidict({
            0: (11,9,1,1),
            1: (2,6,1,1),
            2: (2,9,1,1),
        })
    return R, R_orig, R_dest, R_quant, R_w_cost


def get_K_K_orig_K_dest_K_cap_K_l_cost(testCaseEnum, uniqueArcs=False):
    """
    Vehicle id, origin node, destination node (not used, left for potential future development), vehicle capacity, cost per vehicle per 1km of travel distance.
    """
    if(testCaseEnum == TEST.CASE_1):
        K, K_orig, K_dest, K_cap, K_l_cost = gp.multidict({
            0: (1,3,1000,1),
        })
    elif(testCaseEnum == TEST.CASE_2):
        K, K_orig, K_dest, K_cap, K_l_cost = gp.multidict({
            0: (1,3,1000,1),
            1: (2,4,1000,1)
        })
    elif(testCaseEnum == TEST.CASE_3):
        K, K_orig, K_dest, K_cap, K_l_cost = gp.multidict({
            0: (2,5,1000,1),
            1: (1,4,1000,1),
            # 3: (2,4,1000,1),
        })
    elif(testCaseEnum == TEST.CASE_4):
        K, K_orig, K_dest, K_cap, K_l_cost = gp.multidict({
            0: (1,9,1000,1),
        })
    elif(testCaseEnum == TEST.CASE_5):
        K, K_orig, K_dest, K_cap, K_l_cost = gp.multidict({
            0: (1,9,1000,1),
            1: (2,9,1000,1),
        })
    elif(testCaseEnum == TEST.CASE_6):
        K, K_orig, K_dest, K_cap, K_l_cost = gp.multidict({
            0: (1,9,1000,1),
            1: (2,9,1000,1),
        })
    elif(testCaseEnum == TEST.CASE_7):
        K, K_orig, K_dest, K_cap, K_l_cost = gp.multidict({
            0: (4,1,1000,1),
            1: (4,9,1000,10000),
            2: (4,16,1000,1)
        })
    elif(testCaseEnum == TEST.CASE_8):
        K, K_orig, K_dest, K_cap, K_l_cost = gp.multidict({
            0: (5,1,1000,1),
        })
    elif(testCaseEnum == TEST.CASE_9):
        K, K_orig, K_dest, K_cap, K_l_cost = gp.multidict({
            0: (7,1,1000,1)
        })
    elif(testCaseEnum == TEST.CASE_10):
        K, K_orig, K_dest, K_cap, K_l_cost = gp.multidict({
            0: (1005,1,1000,1)
        })
    elif(testCaseEnum == TEST.CASE_11):
        K, K_orig, K_dest, K_cap, K_l_cost = gp.multidict({
            0: (1,4,1000,1),
            1: (2,5,1000,1),
        })
    elif(testCaseEnum == TEST.CASE_12):
        K, K_orig, K_dest, K_cap, K_l_cost = gp.multidict({
            0: (3,9,1000,1),
        })
    elif(testCaseEnum == TEST.CASE_13):
        K, K_orig, K_dest, K_cap, K_l_cost = gp.multidict({
            0: (195,96,1000,1),
        })
    elif(testCaseEnum == TEST.CASE_14):
        K, K_orig, K_dest, K_cap, K_l_cost = gp.multidict({
            0: (5,1,1000,1),
            # 1: (4,4,1000,1),
            # 2: (12,8,1000,1),
        })
    elif(testCaseEnum == TEST.CASE_15):
        K, K_orig, K_dest, K_cap, K_l_cost = gp.multidict({
            0: (7,31,1000,1),
            # 1: (17,31,1000,1),
            # 2: (17,16,1000,1)
        })
    elif(testCaseEnum == TEST.CASE_16):
        K, K_orig, K_dest, K_cap, K_l_cost = gp.multidict({
            0: (1,11,1000,1),
            1: (7,14,1000,1),
            2: (2,12,1000,1),
        })
    elif(testCaseEnum == TEST.CASE_17):
        K, K_orig, K_dest, K_cap, K_l_cost = gp.multidict({
            0: (17,14,20,1),
            1: (29,14,30,1),
        })
    elif(testCaseEnum == TEST.CASE_18):
        K, K_orig, K_dest, K_cap, K_l_cost = gp.multidict({
            0: (11,9,100,1),
            1: (2,6,100,1),
        })
    return K, K_orig, K_dest, K_cap, K_l_cost



def DoubleTrainOriginNodes(K_orig, N_coords, N, A, D, duplicate_id = 1000):
    """
    Create artificial vehicle origin node (workaround to allow visinting the origin node more than once).
    """
    for k in K_orig:
        orig_node = K_orig[k]
        new_node = orig_node + duplicate_id
        K_orig[k] = new_node
        
        if(new_node not in N):
            N.append(new_node)
        
        if(new_node not in N_coords):
            N_coords[new_node] = (N_coords[orig_node][0]+1, N_coords[orig_node][1]-1)

        new_a = (new_node, orig_node)
        exists = any(a==new_a for a in A)
        if(not exists):
            A.append(new_a)
            D[new_a] = 0
    return K_orig, N_coords, N, A, D